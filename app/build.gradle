plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'

    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.firebase.crashlytics'
    id 'jacoco'

}



android {
    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }

    signingConfigs {
        debug {
        }
        release {
            storeFile file('/home/sergey/Downloads/sergey_portfolio_keystore.jks')
            storePassword "xrdhh748159263"
            keyAlias "shiba"
            keyPassword "xrdhh748159263"
        }
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.leschnitzky.dailyshiba"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 17
        versionName "1.23"



        testInstrumentationRunner "com.leschnitzky.dailyshiba.HiltTestRunner"
        signingConfig signingConfigs.release
    }

    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            signingConfig signingConfigs.release
            debuggable = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            debuggable true
            multiDexEnabled true
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.test:monitor:1.4.0'
        }
    }

    hilt {
        enableTransformForLocalTests = true
    }


    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }


}
jacoco {
    toolVersion "0.7.1.201405082137"
}



dependencies {

//    Android Core
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC3'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'de.hdodenhof:circleimageview:3.1.0'


    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$life_cycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$life_cycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0-alpha02"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation platform('com.google.firebase:firebase-bom:28.2.0')


    implementation 'com.google.android.gms:play-services-auth:19.0.0'


    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //Firebase
        // Declare the dependency for the Realtime Database library
        // When using the BoM, you don't specify versions in Firebase library dependencies
        implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.facebook.android:facebook-login:5.0.0'


    def nav_version = "2.3.5"
    api("androidx.navigation:navigation-fragment-ktx:$nav_version")
    api("androidx.navigation:navigation-ui-ktx:$nav_version")
    api("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")

//    Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestImplementation "io.mockk:mockk-android:1.12.0"
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation 'app.cash.turbine:turbine:0.6.0'
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    testImplementation "io.mockk:mockk:1.12.0"
    testImplementation("androidx.navigation:navigation-testing:$nav_version")
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'app.cash.turbine:turbine:0.6.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"




    def room_version = "2.3.0"
    implementation("androidx.room:room-ktx:$room_version")
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"





    ext.fragment_version = "1.3.2"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation "com.squareup.retrofit2:converter-moshi:2.8.1"

    //Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0"

    //Lottie Animations
    def lottieVersion = "3.7.0"
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // Pretty Dialog
    implementation 'com.github.chnouman:AwesomeDialog:1.0.5'

    //Firestore
    implementation 'com.google.firebase:firebase-firestore'
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.2.1'
    implementation 'com.github.brotoo25:firestore-coroutines:1.0.2'

    //AdMob
    implementation 'com.google.android.gms:play-services-ads:20.2.0'

    //Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.github.ajalt:timberkt:1.5.1'
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    //Crashlytics
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    //App Intro
    implementation 'com.github.AppIntro:AppIntro:6.1.0'

}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }

    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors

    productFlavors.each {

        productFlavorName ->
//iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    //sourceNameâ€Šâ€” e.g. freeDebug ,sourcePathâ€Šâ€”â€Še.g. free/debug
                    def sourceName, sourcePath
                    if (!productFlavorName) {
                        sourceName = sourcePath = "${buildTypeName}"
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                        sourcePath = "${productFlavorName}/${buildTypeName}"
                    }
                    // testTaskNameâ€Šâ€”â€Š e.g. testFreeDebugtest task that the coverage task depends on,
                    def testTaskName = "test${sourceName.capitalize()}UnitTest"
                    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                        group = "Reporting"
                        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                        classDirectories.setFrom(fileTree(
                                dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                excludes: [
                                        '**/R.class',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        'android/**/*.*',
                                        '**/Lambda$*.class', //Retrolambda
                                        '**/Lambda.class',
                                        '**/ * Lambda.class',
                                        '**/*Lambda*.class',
                                        '**/*Lambda*.*',
                                        '**/*Builder.*',
                                        '**/*_MembersInjector.class', //Dagger2 generated code
                                        '**/*_MembersInjector*.*', //Dagger2 generated code
                                        '**/ *_ * Factory*. * ', //Dagger2 generated code
                                        '**/*Component*.*', //Dagger2 generated code
                                        '**/*Module*.*', //Dagger2 generated code
                                        'io/**/*.*'
                                ],
                                // include: []
                        ) + fileTree(
                                dir:"${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                                excludes: [
                                        '**/R.class',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        'android/**/*.*',
                                        '**/Lambda$*.class', //Retrolambda
                                        '**/Lambda.class',
                                        '**/ * Lambda.class',
                                        '**/*Lambda*.class',
                                        '**/*Lambda*.*',
                                        '**/*Builder.*',
                                        '**/*_MembersInjector.class', //Dagger2 generated code
                                        '**/*_MembersInjector*.*', //Dagger2 generated code
                                        '**/ *_ * Factory*. * ', //Dagger2 generated code
                                        '**/*Component*.*', //Dagger2 generated code
                                        '**/*Module*.*', //Dagger2 generated code
                                        'io/**/*.*'
                                ],
                                // include: []
                        )
                        )


                        def coverageSourceDirs = [
                                "src/main/java",
                                "src/$productFlavorName/java",
                                "src/$buildTypeName/java"
                        ]
                        additionalSourceDirs.setFrom(files(coverageSourceDirs))
                        sourceDirectories.setFrom(files(coverageSourceDirs))
                        executionData.setFrom(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
                        reports {
                            //enables and disable the type of file you need
                            xml.enabled = false
                            html.enabled = true
                        }
                    }
            }
    }
}

